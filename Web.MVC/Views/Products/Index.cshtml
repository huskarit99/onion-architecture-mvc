@model PaginatedList<Domain.Entities.Product>

@{
    ViewData["Title"] = "Index";
}

@section Styles {
<style>
    .page-number {
        margin-right: 10px
    }
</style>
    
}

@section Scripts {
    <script type="text/javascript">
        $("#selection").change((e) => {
            const ENDPOINT_URL = window.location.origin + window.location.pathname;
            const url = new URL(ENDPOINT_URL);
            var currentSort = '@ViewData["CurrentSort"]';
            var currentFilter = '@ViewData["CurrentFilter"]';
            if (currentSort)
                url.searchParams.append("sort_order", currentSort);
            if (currentFilter)
                url.searchParams.append("keyword", currentFilter);
            url.searchParams.append("page_size", $(e.target).val());
            console.log(url);
            window.location.replace(url);
      //      let params = new URLSearchParams(window.location.origin + window.location.pathname);
      //      params.append("page_size", $(e.target).val());
      //      window.location.replace(params);
        })
    </script>
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>

<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find by name: <input type="text" name="keyword" value="@ViewData["CurrentFilter"]" />
            <input type="submit" value="Search" class="btn btn-outline-success" /> |
            <a asp-action="Index">Back to Full List</a>
        </p>
    </div>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                <p>No.</p>
            </th>
            <th>
                <a asp-action="Index"
                   asp-route-sort_order="@ViewData["NameSortParm"]"
                   asp-route-page="@Model.PageIndex"
                   asp-route-keyword="@ViewData["CurrentFilter"]"
                   asp-route-page_size="@ViewData["CurrentPageSize"]">Name</a>
            </th>
            <th>
                <a asp-action="Index"
                   asp-route-sort_order="@ViewData["PhoneSortParm"]"
                   asp-route-page="@Model.PageIndex"
                   asp-route-keyword="@ViewData["CurrentFilter"]"
                   asp-route-page_size="@ViewData["CurrentPageSize"]">Phone</a>
            </th>
            <th>
                <a asp-action="Index"
                   asp-route-sort_order="@ViewData["EmailSortParm"]"
                   asp-route-page="@Model.PageIndex"
                   asp-route-keyword="@ViewData["CurrentFilter"]"
                   asp-route-page_size="@ViewData["CurrentPageSize"]">Email</a>
            </th>
            <th>
                <a asp-action="Index"
                   asp-route-sort_order="@ViewData["TextSortParm"]"
                   asp-route-page="@Model.PageIndex"
                   asp-route-keyword="@ViewData["CurrentFilter"]"
                   asp-route-page_size="@ViewData["CurrentPageSize"]">Text</a>
            </th>
            <th>
                <a asp-action="Index"
                   asp-route-sort_order="@ViewData["CurrencySortParm"]"
                   asp-route-page="@Model.PageIndex"
                   asp-route-keyword="@ViewData["CurrentFilter"]"
                   asp-route-page_size="@ViewData["CurrentPageSize"]">Currency</a>
            </th>
            <th>
                <a asp-action="Index"
                   asp-route-sort_order="@ViewData["CategoryIdSortParm"]"
                   asp-route-page="@Model.PageIndex"
                   asp-route-keyword="@ViewData["CurrentFilter"]"
                   asp-route-page_size="@ViewData["CurrentPageSize"]">Category</a>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @{ int numberRow = 0; }
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @numberRow
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Phone)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Email)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Text)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Currency)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Category.Name)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                </td>
            </tr>
            numberRow++;
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
    var topDisabled = Model.PageIndex == 1 ? "disabled" : "";
    var bottomtDisabled = Model.PageIndex == Model.TotalPages ? "disabled" : "";
    var currentPageSize = ViewData["CurrentPageSize"] is not null ? ViewData["CurrentPageSize"] : 5;
    string isCurrentPage(int pageNumber)
    {
        return pageNumber == Model.PageIndex ? "btn-outline-danger" : "btn-outline-dark";
    };
}

<div style="display: flex">
    <a asp-action="Index"
       asp-route-sort_order="@ViewData["CurrentSort"]"
       asp-route-page="1"
       asp-route-keyword="@ViewData["CurrentFilter"]"
       asp-route-page_size="@ViewData["CurrentPageSize"]"
       class="page-number btn btn-outline-dark @topDisabled">
        <<
    </a>
    <a asp-action="Index"
       asp-route-sort_order="@ViewData["CurrentSort"]"
       asp-route-page="@(Model.PageIndex - 1)"
       asp-route-keyword="@ViewData["CurrentFilter"]"
       asp-route-page_size="@ViewData["CurrentPageSize"]"
       class="page-number btn btn-outline-dark @prevDisabled">
        Previous
    </a>
    @for (int pageNumber = Model.StartPage; pageNumber <= Model.EndPage; pageNumber++)
    {
        <a asp-action="Index"
           asp-route-sort_order="@ViewData["CurrentSort"]"
           asp-route-page="@pageNumber"
           asp-route-keyword="@ViewData["CurrentFilter"]"
           asp-route-page_size="@ViewData["CurrentPageSize"]"
           class="page-number btn @isCurrentPage(pageNumber)">
            @pageNumber
        </a>
    }
    <a asp-action="Index"
       asp-route-sort_order="@ViewData["CurrentSort"]"
       asp-route-page="@(Model.PageIndex + 1)"
       asp-route-keyword="@ViewData["CurrentFilter"]"
       asp-route-page_size="@ViewData["CurrentPageSize"]"
       class="page-number btn btn-outline-dark @nextDisabled">
        Next
    </a>
    <a asp-action="Index"
       asp-route-sort_order="@ViewData["CurrentSort"]"
       asp-route-page="@(Model.TotalPages)"
       asp-route-keyword="@ViewData["CurrentFilter"]"
       asp-route-page_size="@ViewData["CurrentPageSize"]"
       class="page-number btn btn-outline-dark @bottomtDisabled">
        >>
    </a>

    <div style="display: flex; width: 100%; justify-content: flex-end">
        <select id="selection" name="page_size" class="form-control" style="width: 80px; text-align: center">
            @for (int i = 0; i < Model.TotalItems / 5; i++)
            {
                <option id="select@(i)"
                        value="@((i+1)*5)"
                        selected="@((i+1)*5 == (int)currentPageSize
                    ? true
                    : false)">
                    @((i+1)*5)
                </option>
            }
        </select>
    </div>
</div>
