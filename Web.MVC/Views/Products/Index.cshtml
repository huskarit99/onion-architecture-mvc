@model PaginatedList<Domain.Entities.Product>

@{
    ViewData["Title"] = "Index";
}

@section Styles {
    <style>
        .page-number {
            margin-right: 10px
        }

        .custom-button {
            border: none;
            background-color: white;
            margin: 0;
            padding: 0;
            color: blue
        }
    </style>

}

@section Scripts {
    <script type="text/javascript">
        const mappingNumberOrderToProductId = {};
        let numberRow = 1;
        let numberOrder;
        @foreach (var product in Model)
        {
            @:numberOrder = parseInt('@Model.PageSize') * parseInt('@(Model.PageIndex - 1)') + numberRow;
            @:mappingNumberOrderToProductId[numberOrder] = '@product.Id';
            @:numberRow++;
        }
        var listProductId = [];
        const lengthOfProduct = parseInt('@Model.Count');
        for (let numberRow = 1; numberRow <= lengthOfProduct; numberRow++) {
            const numberOrder = parseInt('@Model.PageSize') * parseInt('@(Model.PageIndex - 1)') + numberRow;
            const productId = mappingNumberOrderToProductId[numberOrder];
            $("#" + numberOrder).change((e) => {
                if (e.target.checked) {
                    listProductId.push(productId);
                }
                else {
                    listProductId = listProductId.filter((value, number, arr) => {
                        return value !== productId;
                    })
                }
                if (listProductId.length > 0) {
                    document.getElementById("btnDeleteMultipleChoices").disabled = false;
                } else {
                    document.getElementById("btnDeleteMultipleChoices").disabled = true;
                }
            })
        }

        const reloadPageWhenDelete = ({ numberOfDeletedItems, numberOfItemsOnOnePage, pageIndex, totalPages }) => {
            const url = new URL(window.location.href);
            if (numberOfDeletedItems == numberOfItemsOnOnePage && pageIndex == totalPages) {
                pageIndex--;
            }
            if (pageIndex == 0) pageIndex = 1;
            url.searchParams.set("page", pageIndex);
            window.location.replace(url);
        }

        $("#btnSelectAll").click(() => {
            document.getElementById("btnDeleteMultipleChoices").disabled = false;
            for (let numberRow = 1; numberRow <= lengthOfProduct; numberRow++) {
                const numberOrder = parseInt('@Model.PageSize') * parseInt('@(Model.PageIndex - 1)') + numberRow;
                const productId= mappingNumberOrderToProductId[numberOrder];
                document.getElementById(numberOrder + "").checked = true;
                if (!listProductId.includes(productId)) listProductId.push(productId);
            }
        })

        $("#btnDeleteMultipleChoices").click(async () => {
            await Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            })
                .then(async (result) => {
                    if (result.isConfirmed) {
                        await fetch(window.location.origin + "/products/deletes",
                            {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    listProductId
                                })
                            })
                            .then(data => {
                                Swal.fire(
                                    'Deleted!',
                                    'Your file has been deleted.',
                                    'success'
                                ).then(() => {
                                    reloadPageWhenDelete({
                                        numberOfDeletedItems: listProductId.length,
                                        numberOfItemsOnOnePage: '@Model.Count',
                                        pageIndex: parseInt(@Model.PageIndex),
                                        totalPages: '@Model.TotalPages'
                                    });
                                })
                            })
                            .catch((error) => {
                                console.log(error);
                                Swal.fire(
                                    'Not Yet Deleted!',
                                    'Some thing went wrong.',
                                    'error'
                                )
                            });
                }
            })
        })

        $("#selection").change((e) => {
            const ENDPOINT_URL = window.location.origin + window.location.pathname;
            const url = new URL(ENDPOINT_URL);
            var currentSort = '@ViewData["CurrentSort"]';
            var currentFilter = '@ViewData["CurrentFilter"]';
            if (currentSort)
                url.searchParams.append("sort_order", currentSort);
            if (currentFilter)
                url.searchParams.append("keyword", currentFilter);
            url.searchParams.append("page_size", $(e.target).val());
            window.location.replace(url);
        })

        const ModalDeleteProduct = async (productId) => {
            await Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then(async (result) => {
                if (result.isConfirmed) {
                    await fetch(window.location.origin + "/products/delete?id=" + productId,
                        {
                            method: 'POST',
                            headers: {
                                'Accept': 'application/json',
                                'Content-Type': 'application/json'
                            },
                        })
                        .then(data => {
                            Swal.fire(
                                'Deleted!',
                                'Your file has been deleted.',
                                'success'
                            ).then(() => {
                                reloadPageWhenDelete({
                                    numberOfDeletedItems: 1,
                                    numberOfItemsOnOnePage: '@Model.Count',
                                    pageIndex: parseInt(@Model.PageIndex),
                                    totalPages: '@Model.TotalPages'
                                });
                            })
                        })
                        .catch((error) => {
                            console.log(error);
                            Swal.fire(
                                'Not Yet Deleted!',
                                'Some thing went wrong.',
                                'error'
                            )
                        });

                }
            })
        }
    </script>
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>

<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <div style="display: flex; width: 100%">
            <div style="width: 50%">
                <p>
                    Find by name: <input type="text" name="keyword" value="@ViewData["CurrentFilter"]" />
                    <input type="submit" value="Search" class="btn btn-outline-success" /> |
                    <a asp-action="Index">Back to Full List</a>
                </p>
            </div>
            <div style="display: flex; width: 50%; justify-content: flex-end">
                <button id="btnSelectAll" type="button" class="btn btn-primary" style="height:38px; margin-right: 10px">Select All</button>
                <button id="btnDeleteMultipleChoices" type="button" class="btn btn-danger" style="height:38px" disabled>Delete</button>
            </div>
        </div>
        
    </div>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                <p>No.</p>
            </th>
            <th>
                <a asp-action="Index"
                   asp-route-sort_order="@ViewData["NameSortParm"]"
                   asp-route-page="@Model.PageIndex"
                   asp-route-keyword="@ViewData["CurrentFilter"]"
                   asp-route-page_size="@ViewData["CurrentPageSize"]"
                   onclick="">Name</a>
            </th>
            <th>
                <a asp-action="Index"
                   asp-route-sort_order="@ViewData["PhoneSortParm"]"
                   asp-route-page="@Model.PageIndex"
                   asp-route-keyword="@ViewData["CurrentFilter"]"
                   asp-route-page_size="@ViewData["CurrentPageSize"]">Phone</a>
            </th>
            <th>
                <a asp-action="Index"
                   asp-route-sort_order="@ViewData["EmailSortParm"]"
                   asp-route-page="@Model.PageIndex"
                   asp-route-keyword="@ViewData["CurrentFilter"]"
                   asp-route-page_size="@ViewData["CurrentPageSize"]">Email</a>
            </th>
            <th>
                <a asp-action="Index"
                   asp-route-sort_order="@ViewData["TextSortParm"]"
                   asp-route-page="@Model.PageIndex"
                   asp-route-keyword="@ViewData["CurrentFilter"]"
                   asp-route-page_size="@ViewData["CurrentPageSize"]">Text</a>
            </th>
            <th>
                <a asp-action="Index"
                   asp-route-sort_order="@ViewData["CurrencySortParm"]"
                   asp-route-page="@Model.PageIndex"
                   asp-route-keyword="@ViewData["CurrentFilter"]"
                   asp-route-page_size="@ViewData["CurrentPageSize"]">Currency</a>
            </th>
            <th>
                <a asp-action="Index"
                   asp-route-sort_order="@ViewData["CategoryIdSortParm"]"
                   asp-route-page="@Model.PageIndex"
                   asp-route-keyword="@ViewData["CurrentFilter"]"
                   asp-route-page_size="@ViewData["CurrentPageSize"]">Category</a>
            </th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @{ int numberRow = 1; }
        @foreach (var item in Model)
        {
        <tr>
            <td>
                @(Model.PageSize * (Model.PageIndex - 1) + numberRow)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Phone)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Email)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Text)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Currency)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Category.Name)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <button class="custom-button" onclick="return ModalDeleteProduct(@item.Id)">Delete</button>
            </td>
            <td>
                <input type="checkbox"  id="@(Model.PageSize * (Model.PageIndex - 1) + numberRow)" />
            </td>
        </tr>
            numberRow++;
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
    var topDisabled = Model.PageIndex == 1 ? "disabled" : "";
    var bottomtDisabled = Model.PageIndex == Model.TotalPages ? "disabled" : "";
    var currentPageSize = ViewData["CurrentPageSize"] is not null ? ViewData["CurrentPageSize"] : 5;
    string isCurrentPage(int pageNumber)
    {
        return pageNumber == Model.PageIndex ? "btn-outline-danger" : "btn-outline-dark";
    };
}

<div style="display: flex">
    <a asp-action="Index"
       asp-route-sort_order="@ViewData["CurrentSort"]"
       asp-route-page="1"
       asp-route-keyword="@ViewData["CurrentFilter"]"
       asp-route-page_size="@ViewData["CurrentPageSize"]"
       class="page-number btn btn-outline-dark @topDisabled">
        <<
    </a>
    <a asp-action="Index"
       asp-route-sort_order="@ViewData["CurrentSort"]"
       asp-route-page="@(Model.PageIndex - 1)"
       asp-route-keyword="@ViewData["CurrentFilter"]"
       asp-route-page_size="@ViewData["CurrentPageSize"]"
       class="page-number btn btn-outline-dark @prevDisabled">
        Previous
    </a>
    @for (int pageNumber = Model.StartPage; pageNumber <= Model.EndPage; pageNumber++)
    {
        <a asp-action="Index"
           asp-route-sort_order="@ViewData["CurrentSort"]"
           asp-route-page="@pageNumber"
           asp-route-keyword="@ViewData["CurrentFilter"]"
           asp-route-page_size="@ViewData["CurrentPageSize"]"
           class="page-number btn @isCurrentPage(pageNumber)">
            @pageNumber
        </a>
    }
    <a asp-action="Index"
       asp-route-sort_order="@ViewData["CurrentSort"]"
       asp-route-page="@(Model.PageIndex + 1)"
       asp-route-keyword="@ViewData["CurrentFilter"]"
       asp-route-page_size="@ViewData["CurrentPageSize"]"
       class="page-number btn btn-outline-dark @nextDisabled">
        Next
    </a>
    <a asp-action="Index"
       asp-route-sort_order="@ViewData["CurrentSort"]"
       asp-route-page="@(Model.TotalPages)"
       asp-route-keyword="@ViewData["CurrentFilter"]"
       asp-route-page_size="@ViewData["CurrentPageSize"]"
       class="page-number btn btn-outline-dark @bottomtDisabled">
        >>
    </a>

    <div style="display: flex; width: 100%; justify-content: flex-end">
        <select id="selection" name="page_size" class="form-control" style="width: 80px; text-align: center">
            @for (int i = 0; i < Model.TotalItems / 5; i++)
            {
                <option id="select@(i)"
                        value="@((i+1)*5)"
                        selected="@((i+1)*5 == (int)currentPageSize
                    ? true
                    : false)">
                    @((i+1)*5)
                </option>
            }
        </select>
    </div>
</div>
